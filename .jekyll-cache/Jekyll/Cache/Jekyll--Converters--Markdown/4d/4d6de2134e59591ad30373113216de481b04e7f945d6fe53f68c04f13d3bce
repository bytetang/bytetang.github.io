I"g4<p>我们在阅读源码的时候经常会看到有mask flag的与或运算，往往出现在判断的语句中，另我十分的困惑。</p>

<h1 id="一认识mask-flag">一、认识Mask flag</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td> --><td class="rouge-code"><pre>    <span class="cm">/**
     * Returns the enabled status for this view. The interpretation of the
     * enabled state varies by subclass.
     *
     * @return True if this view is enabled, false otherwise.
     */</span>
    <span class="nd">@ViewDebug</span><span class="o">.</span><span class="na">ExportedProperty</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEnabled</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">mViewFlags</span> <span class="o">&amp;</span> <span class="no">ENABLED_MASK</span><span class="o">)</span> <span class="o">==</span> <span class="no">ENABLED</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>代码位于Android View.java文件，isEnable方法表示视图控件是否可以响应点击状态等。其中ENABLED_MASK的定义如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td> --><td class="rouge-code"><pre>    <span class="cm">/**
     * Mask for use with setFlags indicating bits used for indicating whether
     * this view is enabled
     * {@hide}
     */</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">ENABLED_MASK</span> <span class="o">=</span> <span class="mh">0x00000020</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>ENABLED_MASK为16进制的数，可以用于检验mViewFlags的enabla状态。ENABLED = 0x00000000,DISABLED = 0x00000020.</p>

<p>16进制的一位对应二进制4位，ENABLED_MASK去除高位0（0与运算均是0），低二位二进制位表示为0010 0000。</p>

<p>假设mViewFlags = 0x00000020,低二位为 0010 0000</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="n">mViewFlags</span> <span class="o">&amp;</span> <span class="no">ENABLED_MASK</span> <span class="o">=&gt;</span> <span class="mo">0010</span> <span class="mo">0000</span> <span class="o">&amp;</span> <span class="mo">0010</span> <span class="mo">0000</span> <span class="o">=</span> <span class="mo">0010</span> <span class="mo">0000</span> <span class="o">=</span> <span class="mh">0x20</span> <span class="no">DISABLED</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>可以看出只有低2位为0x20的情况，与mask的运算才能得到DISABLED的结果，此mask就是用于检验第二位是否为0x20的.</p>

<blockquote>
  <p>如果mViewFlags低2位为0x10,0x00等计算结果都是ENABLED,大家可以用上述类似的方式演算下。</p>
</blockquote>

<p>通过上面判断状态的案例初步认识了mask flag是怎么工作的之后，问题来了</p>

<p><b>通过一个true/false变量就能完成的事搞那么复杂干吗?</b></p>

<h1 id="二-深入mask">二、 深入MASK</h1>

<p>在只表示是否的时候，使用掩码和状态变量基本没有什么区别，但是当变量变得多起来的时候使用mask就变得更加清楚了。</p>

<p>这里列举一个更为复杂的场景,HUNGRY=0x0000 0010表示饿了，THIRST=0x0000 0100表示渴了，TIRDED=0x0000 1000表示困了，根据小明的上班的状态，决定小明做什么事情。</p>

<p>比如判断小明是不是饿了</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre><span class="kt">void</span> <span class="nf">isHungry</span><span class="o">(</span><span class="kt">int</span> <span class="n">flag</span><span class="o">){</span>
    <span class="k">return</span> <span class="n">flag</span> <span class="o">&amp;</span> <span class="no">HUNGRY</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>此时如果小明只是渴了那么flag=0x0000 0100=&gt; 0x0000 0100 &amp; 0x0000 0001 = 0x0000 0000，所以没有饿。</p>

<p>当flag=0x0000 0010=&gt; 0x0000 0010 &amp; 0x0000 0010 = 0x0000 0010 = HUNGRY,说明是饿了。</p>

<p>但是如果小明又饿又困,很显然，这个没有办法用一个变量来表示当前的状态，用mask来玩就变得简单了。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td> --><td class="rouge-code"><pre><span class="kt">boolean</span> <span class="nf">isHungryAndThired</span><span class="o">(</span><span class="kt">int</span> <span class="n">flag</span><span class="o">){</span>
    <span class="kt">int</span> <span class="no">HAT</span> <span class="o">=</span> <span class="o">(</span><span class="no">HUNGRY</span> <span class="o">|</span> <span class="no">TIRDED</span><span class="o">);</span><span class="c1">//又饿又困没救了</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">flag</span> <span class="o">&amp;</span> <span class="no">HAT</span><span class="o">)</span> <span class="o">==</span> <span class="no">HAT</span><span class="o">;</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>如果flag此时是<b>渴了</b>即flag = THIRST</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="n">flag</span> <span class="o">&amp;</span> <span class="o">(</span><span class="no">HUNGRY</span> <span class="o">|</span> <span class="no">TIRDED</span><span class="o">)</span> <span class="o">=</span> <span class="mo">0000</span> <span class="mo">0100</span> <span class="o">&amp;</span> <span class="err"></span><span class="o">(</span><span class="mo">0000</span> <span class="mo">0010</span> <span class="o">|</span> <span class="err"></span><span class="mo">0000</span> <span class="mi">1000</span><span class="o">)</span> <span class="o">=</span> <span class="mo">0000</span> <span class="mo">0100</span> <span class="o">&amp;</span> <span class="mo">0000</span> <span class="mi">1010</span> <span class="o">=</span> <span class="mo">0000</span> <span class="mo">00000</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>如果是<b>既饿又渴</b>flag = (HUNGRY | THIRST) = 0x0000 0110</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="n">flag</span> <span class="o">&amp;</span> <span class="o">(</span><span class="no">HUNGRY</span> <span class="o">|</span> <span class="no">TIRDED</span><span class="o">)</span> <span class="o">=</span> <span class="mo">0000</span> <span class="mo">0110</span> <span class="o">&amp;</span> <span class="mo">0000</span> <span class="mi">1010</span> <span class="o">=</span> <span class="mo">0000</span> <span class="mo">0010</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>只有当flag = (HUNGRY | TIRDED)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="n">flag</span> <span class="o">&amp;</span> <span class="o">(</span><span class="no">HUNGRY</span> <span class="o">|</span> <span class="no">TIRDED</span><span class="o">)</span> <span class="o">=</span> <span class="mo">0000</span> <span class="mi">1010</span> <span class="o">&amp;</span> <span class="mo">0000</span> <span class="mi">1010</span> <span class="o">=</span> <span class="mo">0000</span> <span class="mi">1010</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>以上只用定义的三个变量玩出很多花样，变量的与或可以灵活组合出一个新的状态，如又饿又困:(HUNGRY | TIRDED)，即不饿又不渴
:</p>

<p>~(HUNGRY|THIRST)，然后又可以方便的去检测这些状态。</p>

<p>这里拓展下上面的HUNGRY,THIRST 和TIRDED使用二级制也可以表示为:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre>   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">HUNGRY</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 0010</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">THIRST</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// 0100</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">TIRDED</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="c1">// 1000</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="三复位功能">三、复位功能</h1>
<p><b>不仅可以完成复杂控制，还可以简便的完成复位清除等。</b></p>

<p>继续拿上面的去举例，小明被判断为饿了之后去吃饭了，吃完应该就不饿了。</p>

<p>MASK = 0x0000 0010</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td> --><td class="rouge-code"><pre><span class="k">if</span><span class="o">(</span><span class="n">flag</span> <span class="o">&amp;</span> <span class="no">HUNGRY</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">){</span>    <span class="err"></span>
    <span class="err"></span><span class="n">toLunch</span><span class="o">();</span><span class="c1">//饿了，去吃午饭了</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">30</span><span class="o">*</span><span class="mi">1000</span><span class="o">);</span><span class="c1">//吃了三十分钟</span>
    <span class="n">lunchFinish</span><span class="o">(</span><span class="n">flag</span><span class="o">);</span><span class="c1">//吃完了</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>lunchFinish()</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre><span class="kt">void</span> <span class="nf">lunchFinish</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">flag</span><span class="o">){</span>
    <span class="n">flag</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="no">HUNGRY</span><span class="o">;</span><span class="c1">//不饿了</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这里留给大家去推算。</p>

<p>常见的位运算操作：</p>

<ul>
  <li>测试第 k 位: s &amp; (1 « k)</li>
  <li>设置第 k 位: s |= (1 « k)</li>
  <li>第 k 位置零: s &amp;= ~(1 « k)</li>
  <li>切换第 k 位值: s ^= ~(1 « k)</li>
  <li>乘以 2: s « n</li>
  <li>除以 2: s » n</li>
  <li>交集: s &amp; t</li>
  <li>并集: s | t</li>
  <li>减法: s &amp; ~t</li>
  <li>交换 x = x ^ y ^ (y = x)</li>
  <li>取出最小非 0 位（Extract lowest set bit）: s &amp; (-s)</li>
  <li>取出最小 0 位（Extract lowest unset bit）: ~s &amp; (s + 1)</li>
  <li>交换值:
     <code class="language-plaintext highlighter-rouge">
        x ^= y;
        y ^= x;
        x ^= y;
    </code></li>
</ul>
:ET