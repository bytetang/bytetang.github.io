

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>Morse</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2021-07-27T22:59:41+08:00</updated>
  <author>
    <name>your_full_name</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 your_full_name </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>OAuth2.0认证授权workflow</title>
    <link href="/posts/workflow-sso/" rel="alternate" type="text/html" title="OAuth2.0认证授权workflow" />
    <published>2019-04-01T00:00:00+08:00</published>
  
    <updated>2021-07-27T22:39:13+08:00</updated>
  
    <id>/posts/workflow-sso/</id>
    <content src="/posts/workflow-sso/" />
    <author>
      <name>Morse</name>
    </author>

  
    
    <category term="Blogging" />
    
    <category term="Foundation" />
    
  

  
    <summary>
      





      在设计一个系统的时候大多数都需要一个登陆授权的方案来保证访问安全和权限的控制。好在我们有类似于spring这样的框架，更多的时候只需要完成几行配置就能工作。这也让开发者忽略了他的工作流程和原理,就通过这篇文章来认识探讨下。首先抛出一个概念：SSO单点登录（Single Sign On）。

SSO&amp;amp;CAS
其定义为：


  SSO是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。它包括可以将这次主要的登录映射到其他应用中用于同一个用户的登录的机制。它是目前比较流行的企业业务整合的解决方案之一。


SSO这是一个概念方案，其中有我们经常听到的著名的耶鲁大学的CAS系统就是它的一个实现。具体可以了解 CAS Architecture，其工程流程图如下：



其中核心要解决的的是引入鉴权和认证的流程，实现多套系统的单一访问需要的是同一套授权方案即可。
...
    </summary>
  

  </entry>

  
  <entry>
    <title>安卓并发编程全解析</title>
    <link href="/posts/threading/" rel="alternate" type="text/html" title="安卓并发编程全解析" />
    <published>2019-03-27T00:00:00+08:00</published>
  
    <updated>2021-07-27T22:39:13+08:00</updated>
  
    <id>/posts/threading/</id>
    <content src="/posts/threading/" />
    <author>
      <name>Morse</name>
    </author>

  
    
    <category term="Blogging" />
    
    <category term="Android" />
    
  

  
    <summary>
      





      多线程是开发中较为高阶的知识，但是涉及到的知识点非常的多。设计或写多线程的代码需要谨慎处理，前提是我们要有比较系统性的认识。

一、从Thread Stack认识线程
在android开发中我们通常会在发生卡顿或者ANR的时候，去拿手机里的traces.txt做分析，这里面dump了ANR出现时的线程状态。我们以traces.txt里面的堆栈为例，认识下线程。

位置: data/anr/traces.txt

cmd: adb pull data/anr/traces.txt ~/Downloads/anr/

"main" prio=5 tid=1 Native
  | group="main" sCount=1 dsCount=0 flags=1 obj=0x73fa0bb0 self=0x7efc4a3a00
  | sysTid=21720 nice=0 cgrp=defa...
    </summary>
  

  </entry>

  
  <entry>
    <title>Android Code Review</title>
    <link href="/posts/android-codereview/" rel="alternate" type="text/html" title="Android Code Review" />
    <published>2019-02-27T00:00:00+08:00</published>
  
    <updated>2021-07-27T22:39:13+08:00</updated>
  
    <id>/posts/android-codereview/</id>
    <content src="/posts/android-codereview/" />
    <author>
      <name>Morse</name>
    </author>

  
    
    <category term="Blogging" />
    
    <category term="Android" />
    
  

  
    <summary>
      





      空指针篇


  【建议】字符串比较，将常量放在前面


case:
static final String DOMESTIC = "1"
domestic.equals(DOMESTIC);


修正为：
DOMESTIC.equals(domestic);



  页面间对象传参在数据不完整的情况下崩溃，多数情况下是因为接收到了空的传参未处理直接调用，建议不要依赖调用方的”安全”使用。



  返回空列表替代null


List&amp;lt;Product&amp;gt; getAllLocale(){
     ...
      if(productList == null){
         return new ArrayList&amp;lt;Product&amp;gt;();
      }
}


  return参数在后续会被使用，如果难以保证调用的地方都安全的调用了，最好还是不要返...
    </summary>
  

  </entry>

  
  <entry>
    <title>Applink</title>
    <link href="/posts/applink/" rel="alternate" type="text/html" title="Applink" />
    <published>2019-01-15T00:00:00+08:00</published>
  
    <updated>2021-07-27T22:39:13+08:00</updated>
  
    <id>/posts/applink/</id>
    <content src="/posts/applink/" />
    <author>
      <name>Morse</name>
    </author>

  
    
    <category term="Blogging" />
    
    <category term="Android" />
    
  

  
    <summary>
      





      内容概念：


  概念及分类
  市场使用
  唤起App机制
  流转过程


App Link

通过一些技术手段有途径能唤起我们app的URI，我们统称为App Link

唤醒技术手段


  Uri Scheme（DeepLink）
  Universal Link（iOS）、App Links（Android）
  Deferred DeepLink


Uri Scheme

格式：customschema://host/path?params

直接跳转


  h5中模拟点击链接（Android）
  设置window.location.href（iOS）


iframe（iOS9之后不支持，chrome 25之后不支持）


  在body上添加iframe，设置src为跳转的Uri


Universal Link

iOS Universal Links
...
    </summary>
  

  </entry>

  
  <entry>
    <title>Mask掩码运算及其应用</title>
    <link href="/posts/mask/" rel="alternate" type="text/html" title="Mask掩码运算及其应用" />
    <published>2018-12-16T00:00:00+08:00</published>
  
    <updated>2021-07-27T22:39:13+08:00</updated>
  
    <id>/posts/mask/</id>
    <content src="/posts/mask/" />
    <author>
      <name>Morse</name>
    </author>

  
    
    <category term="Blogging" />
    
    <category term="Foundation" />
    
  

  
    <summary>
      





      我们在阅读源码的时候经常会看到有mask flag的与或运算，往往出现在判断的语句中，另我十分的困惑。

一、认识Mask flag

    /**
     * Returns the enabled status for this view. The interpretation of the
     * enabled state varies by subclass.
     *
     * @return True if this view is enabled, false otherwise.
     */
    @ViewDebug.ExportedProperty
    public boolean isEnabled() {
        return (mViewFlags &amp;amp; ENABLED_MASK) == ENABLED;
    ...
    </summary>
  

  </entry>

</feed>


